# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main
- ci-cd
pr:
  branches:
    include:
    - main
    - ci-cd

variables:
  azureSubscription: 'azureSubscription'
  resourceGroupName: 'rookies7'
  imageName: 'asset-backend'
  registryName: 'duongminhhieu008'
  appName: 'rookies71'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  GCP_PROJECT_ID: 'asset-management-428307'
  containerRegistry: 'gcr-connection-2'

stages:
- stage: Build
  displayName: 'Build and Test and Package'
  pool:
    vmImage: ubuntu-latest
  jobs:
    - job: Build
      displayName: 'Test and Package'
      steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '21'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'

      - task: DownloadSecureFile@1
        name: GCP_SERVICE_ACCOUNT_KEY
        displayName: 'Download Secure File'
        inputs:
          secureFile: 'asset-management-428307-0ece6390dcdb.json'

      - script: |
          gcloud auth login --cred-file:$(GCP_SERVICE_ACCOUNT_KEY.secureFilePath) --project=${GCP_PROJECT_ID}
        displayName: 'Login to GCP'
          

      - task: Docker@2
        displayName: 'Build and push an image to container registry'
        inputs:
          command: buildAndPush
          repository: $(registryName)/$(imageName)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(containerRegistry)
          tags: |
            $(tag)

# - stage: Deploy
#   displayName: Deploy 
#   pool:
#     vmImage: ubuntu-latest
#   jobs:
#     - job: container
#       displayName: create container
#       steps:
#       - task: AzureCLI@2
#         displayName: 'set env'
#         inputs:
#           azureSubscription: 'Visual Studio Enterprise Subscription – MPN(86b7e5ed-c9e5-41a2-a581-7447b9743234)'
#           scriptType: 'bash'
#           scriptLocation: 'inlineScript'
#           inlineScript: |
#             db_url=$(DB_URL)
#             db_username=$(DB_USERNAME)
#             db_password=$(DB_PASSWORD)
            
#             az webapp config appsettings set --resource-group 'rookies7' --name $(appName) --settings DB_URL=$db_url --settings DB_USERNAME=$db_username --settings DB_PASSWORD=$db_password
#       - task: AzureWebAppContainer@1
#         displayName: 'Azure Web App on Container Deploy'
#         inputs:
#           azureSubscription: 'Visual Studio Enterprise Subscription – MPN(86b7e5ed-c9e5-41a2-a581-7447b9743234)'
#           appName: '$(appName)'
#           containers: '$(registryName)/$(imageName):$(tag)'